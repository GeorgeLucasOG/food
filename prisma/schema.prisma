generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Restaurant {
  id                 String               @id @default(uuid())
  name               String
  slug               String               @unique
  description        String
  avatarImageUrl     String
  coverImageUrl      String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  AccountsPayable    AccountsPayable[]
  AccountsReceivable AccountsReceivable[]
  Ingredients        Ingredients[]
  menuCategories     MenuCategory[]
  orders             Order[]
  products           Product[]
  StockMovements     StockMovements[]
  Suppliers          Suppliers[]
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products     Product[]
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  restaurantId   String
  menuCategoryId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  orderProducts  OrderProduct[]
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  restaurantId      String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  customerCpf       String
  customerName      String
  address           String?           @db.VarChar(255)
  whatsapp          String?           @db.VarChar(15)
  tableNumber       String?           @db.VarChar(10)
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderProducts     OrderProduct[]
}

model OrderProduct {
  id        String   @id @default(uuid())
  productId String
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model AccountsPayable {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description  String
  pixKey       String?
  boletoCode   String?
  dueDate      DateTime   @db.Timestamptz(6)
  paidDate     DateTime?  @db.Timestamptz(6)
  amount       Float
  status       String     @default("PENDING")
  restaurantId String
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?  @db.Timestamptz(6)
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model AccountsReceivable {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description  String
  pixKey       String?
  boletoCode   String?
  dueDate      DateTime   @db.Timestamptz(6)
  receivedDate DateTime?  @db.Timestamptz(6)
  amount       Float
  status       String     @default("PENDING")
  restaurantId String
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?  @db.Timestamptz(6)
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Ingredients {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String
  quantity       Float            @default(0)
  minQuantity    Float            @default(0)
  unit           String
  supplierId     String?          @db.Uuid
  alertThreshold Float?
  restaurantId   String
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?        @db.Timestamptz(6)
  Restaurant     Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  StockMovements StockMovements[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model StockMovements {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ingredientId String      @db.Uuid
  type         String
  quantity     Float
  description  String?
  restaurantId String
  createdAt    DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?   @db.Timestamptz(6)
  Ingredients  Ingredients @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Suppliers {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String
  companyName  String?
  email        String?
  phone        String?
  cnpj         String?
  address      String?
  restaurantId String
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?  @db.Timestamptz(6)
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ApiSettings {
  id              String   @id @db.Uuid
  imageProcessing Json
  createdAt       DateTime @db.Timestamptz(6)
  updatedAt       DateTime @db.Timestamptz(6)
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum ConsumptionMethod {
  TAKEAWAY
  DINE_IN
}
